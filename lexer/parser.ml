type token =
  | BOOL
  | BREAK
  | BYREF
  | CHAR
  | CONTINUE
  | CONST_C of (char)
  | CONST_F of (float)
  | CONST_I of (int)
  | CONST_S of (string)
  | DELETE
  | DOUBLE
  | ELSE
  | FALSE
  | FOR
  | ID of (string)
  | IF
  | INT
  | NEW
  | NULL
  | RETURN
  | TRUE
  | VOID
  | ASSIGN
  | MORE
  | LESS
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | AND
  | EXC
  | QUE
  | DDOT
  | COMMA
  | SEMICOLON
  | L_PAREN
  | R_PAREN
  | L_BRACK
  | R_BRACK
  | L_BRACE
  | R_BRACE
  | EQ
  | NEQ
  | LEQ
  | GEQ
  | PLUSEQ
  | MINUSEQ
  | TIMESEQ
  | DIVEQ
  | MODEQ
  | INCR
  | DECR
  | LOGICAL_AND
  | LOGICAL_OR
  | EOF

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
    open Printf
    open Ast
# 65 "parser.ml"
let yytransl_const = [|
  257 (* BOOL *);
  258 (* BREAK *);
  259 (* BYREF *);
  260 (* CHAR *);
  261 (* CONTINUE *);
  266 (* DELETE *);
  267 (* DOUBLE *);
  268 (* ELSE *);
  269 (* FALSE *);
  270 (* FOR *);
  272 (* IF *);
  273 (* INT *);
  274 (* NEW *);
  275 (* NULL *);
  276 (* RETURN *);
  277 (* TRUE *);
  278 (* VOID *);
  279 (* ASSIGN *);
  280 (* MORE *);
  281 (* LESS *);
  282 (* PLUS *);
  283 (* MINUS *);
  284 (* TIMES *);
  285 (* DIV *);
  286 (* MOD *);
  287 (* AND *);
  288 (* EXC *);
  289 (* QUE *);
  290 (* DDOT *);
  291 (* COMMA *);
  292 (* SEMICOLON *);
  293 (* L_PAREN *);
  294 (* R_PAREN *);
  295 (* L_BRACK *);
  296 (* R_BRACK *);
  297 (* L_BRACE *);
  298 (* R_BRACE *);
  299 (* EQ *);
  300 (* NEQ *);
  301 (* LEQ *);
  302 (* GEQ *);
  303 (* PLUSEQ *);
  304 (* MINUSEQ *);
  305 (* TIMESEQ *);
  306 (* DIVEQ *);
  307 (* MODEQ *);
  308 (* INCR *);
  309 (* DECR *);
  310 (* LOGICAL_AND *);
  311 (* LOGICAL_OR *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  262 (* CONST_C *);
  263 (* CONST_F *);
  264 (* CONST_I *);
  265 (* CONST_S *);
  271 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\004\000\008\000\
\008\000\007\000\010\000\010\000\010\000\010\000\011\000\011\000\
\009\000\012\000\012\000\005\000\005\000\006\000\006\000\014\000\
\014\000\014\000\017\000\017\000\015\000\015\000\016\000\016\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\020\000\020\000\021\000\021\000\022\000\022\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\023\000\023\000\013\000\024\000\024\000\
\024\000\024\000\024\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\026\000\026\000\026\000\026\000\027\000\027\000\027\000\
\027\000\027\000\027\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\001\000\001\000\001\000\003\000\001\000\
\003\000\002\000\001\000\001\000\001\000\001\000\000\000\002\000\
\002\000\000\000\003\000\006\000\006\000\009\000\009\000\000\000\
\001\000\003\000\003\000\002\000\000\000\002\000\000\000\002\000\
\001\000\002\000\003\000\006\000\011\000\009\000\003\000\003\000\
\003\000\000\000\002\000\000\000\001\000\000\000\001\000\001\000\
\003\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\004\000\004\000\001\000\001\000\001\000\001\000\004\000\005\000\
\002\000\005\000\002\000\000\000\003\000\001\000\002\000\002\000\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\002\000\002\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\013\000\012\000\014\000\011\000\000\000\100\000\
\000\000\002\000\004\000\005\000\006\000\000\000\015\000\000\000\
\001\000\003\000\000\000\000\000\008\000\000\000\000\000\000\000\
\000\000\017\000\000\000\007\000\016\000\000\000\000\000\000\000\
\025\000\000\000\054\000\055\000\053\000\056\000\000\000\051\000\
\000\000\000\000\052\000\050\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\059\000\060\000\
\061\000\062\000\000\000\009\000\000\000\028\000\000\000\000\000\
\000\000\000\000\068\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\019\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\090\000\091\000\000\000\000\000\027\000\026\000\
\021\000\029\000\020\000\029\000\000\000\000\000\000\000\049\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\057\000\000\000\000\000\000\000\058\000\030\000\000\000\
\000\000\000\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\031\000\023\000\032\000\000\000\022\000\
\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\034\000\040\000\039\000\000\000\000\000\000\000\041\000\
\035\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\036\000\000\000\000\000\043\000\000\000\000\000\
\038\000\000\000\000\000\037\000"

let yydgoto = "\002\000\
\008\000\009\000\143\000\011\000\012\000\013\000\014\000\020\000\
\021\000\015\000\022\000\026\000\053\000\032\000\135\000\144\000\
\033\000\158\000\159\000\187\000\168\000\162\000\109\000\055\000\
\056\000\057\000\058\000"

let yysindex = "\016\000\
\121\255\000\000\000\000\000\000\000\000\000\000\026\255\000\000\
\001\000\000\000\000\000\000\000\000\000\073\255\000\000\058\255\
\000\000\000\000\221\254\046\255\000\000\069\255\002\255\002\255\
\178\000\000\000\084\255\000\000\000\000\036\255\091\255\229\254\
\000\000\040\255\000\000\000\000\000\000\000\000\178\000\000\000\
\070\255\036\255\000\000\000\000\178\000\178\000\178\000\178\000\
\178\000\083\255\178\000\178\000\079\255\157\003\000\000\000\000\
\000\000\000\000\074\255\000\000\106\255\000\000\002\255\254\254\
\038\255\255\254\000\000\103\255\255\254\255\254\255\254\255\254\
\255\254\108\255\042\001\255\254\255\254\000\000\178\000\178\000\
\178\000\178\000\178\000\178\000\178\000\178\000\178\000\178\000\
\178\000\178\000\178\000\178\000\178\000\178\000\178\000\178\000\
\178\000\178\000\000\000\000\000\178\000\178\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\255\178\000\178\000\000\000\
\190\003\214\255\214\255\098\255\098\255\255\254\255\254\255\254\
\075\001\190\003\108\001\214\255\214\255\214\255\214\255\190\003\
\190\003\190\003\190\003\190\003\029\005\254\004\121\255\121\255\
\178\000\000\000\141\001\255\254\178\000\000\000\000\000\156\255\
\197\255\190\003\000\000\222\004\133\255\133\255\115\255\071\255\
\131\255\178\000\000\000\000\000\000\000\000\000\174\001\000\000\
\000\000\137\255\142\255\178\000\143\255\178\000\157\003\144\255\
\019\000\000\000\000\000\000\000\145\255\148\255\207\001\000\000\
\000\000\178\000\178\000\142\000\150\255\153\255\167\255\178\000\
\178\000\142\000\000\000\152\255\155\255\000\000\142\000\178\000\
\000\000\157\255\142\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\120\255\000\000\000\000\199\000\095\255\095\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\232\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\154\255\000\000\000\000\
\000\000\000\000\120\255\000\000\000\000\000\000\000\000\000\000\
\000\000\240\001\000\000\009\001\017\002\050\002\083\002\116\002\
\149\002\000\000\000\000\182\002\215\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\235\255\029\004\052\004\223\003\000\004\248\002\025\003\058\003\
\000\000\077\001\000\000\075\004\098\004\121\004\144\004\159\003\
\192\003\219\004\251\004\026\005\167\004\190\004\060\000\060\000\
\000\000\000\000\000\000\091\003\000\000\000\000\000\000\000\000\
\000\000\109\255\000\000\251\254\160\255\160\255\000\000\124\003\
\000\000\164\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\164\255\000\000\000\000\012\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\164\255\164\255\000\000\000\000\000\000\101\000\163\255\
\164\255\000\000\000\000\000\000\000\000\000\000\000\000\163\255\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\242\255\000\000\
\187\000\000\000\000\000\000\000\000\000\195\000\112\000\132\255\
\158\000\210\255\231\255\000\000\195\255\072\000\000\000\000\000\
\000\000\000\000\000\000"

let yytablesize = 1618
let yytable = "\054\000\
\017\000\024\000\003\000\025\000\030\000\004\000\010\000\063\000\
\031\000\031\000\064\000\145\000\005\000\066\000\018\000\061\000\
\001\000\064\000\006\000\069\000\070\000\071\000\072\000\073\000\
\075\000\076\000\077\000\068\000\064\000\064\000\064\000\169\000\
\064\000\105\000\064\000\074\000\003\000\089\000\106\000\004\000\
\016\000\064\000\064\000\064\000\064\000\064\000\005\000\045\000\
\031\000\045\000\099\000\100\000\006\000\113\000\114\000\115\000\
\116\000\117\000\118\000\119\000\120\000\121\000\122\000\123\000\
\124\000\125\000\126\000\127\000\128\000\129\000\130\000\131\000\
\132\000\107\000\063\000\133\000\134\000\065\000\108\000\137\000\
\027\000\028\000\138\000\003\000\139\000\140\000\004\000\019\000\
\035\000\036\000\037\000\038\000\039\000\005\000\023\000\040\000\
\029\000\041\000\059\000\006\000\042\000\043\000\173\000\044\000\
\165\000\062\000\067\000\067\000\045\000\046\000\047\000\146\000\
\025\000\048\000\049\000\148\000\181\000\182\000\078\000\050\000\
\103\000\003\000\188\000\189\000\004\000\084\000\085\000\086\000\
\167\000\024\000\194\000\005\000\024\000\183\000\051\000\052\000\
\089\000\006\000\167\000\190\000\175\000\110\000\007\000\069\000\
\193\000\111\000\069\000\161\000\196\000\099\000\100\000\164\000\
\167\000\167\000\018\000\018\000\174\000\149\000\167\000\167\000\
\150\000\035\000\036\000\037\000\038\000\039\000\167\000\166\000\
\040\000\151\000\152\000\153\000\171\000\042\000\043\000\154\000\
\044\000\172\000\186\000\176\000\178\000\045\000\046\000\047\000\
\179\000\184\000\048\000\049\000\185\000\191\000\192\000\155\000\
\050\000\070\000\195\000\046\000\156\000\157\000\149\000\044\000\
\044\000\150\000\035\000\036\000\037\000\038\000\039\000\051\000\
\052\000\040\000\151\000\152\000\153\000\060\000\042\000\043\000\
\154\000\044\000\034\000\136\000\104\000\163\000\045\000\046\000\
\047\000\000\000\000\000\048\000\049\000\000\000\000\000\000\000\
\155\000\050\000\000\000\000\000\000\000\156\000\160\000\082\000\
\083\000\084\000\085\000\086\000\000\000\000\000\000\000\000\000\
\051\000\052\000\000\000\000\000\089\000\000\000\000\000\000\000\
\000\000\003\000\000\000\000\000\004\000\000\000\000\000\000\000\
\000\000\099\000\100\000\005\000\094\000\094\000\094\000\000\000\
\094\000\006\000\094\000\000\000\149\000\000\000\007\000\150\000\
\035\000\036\000\037\000\038\000\039\000\000\000\000\000\040\000\
\151\000\152\000\153\000\000\000\042\000\043\000\154\000\044\000\
\000\000\000\000\000\000\000\000\045\000\046\000\047\000\000\000\
\000\000\048\000\049\000\000\000\000\000\000\000\155\000\050\000\
\000\000\000\000\000\000\156\000\177\000\031\000\000\000\000\000\
\031\000\031\000\031\000\031\000\031\000\031\000\051\000\052\000\
\031\000\031\000\031\000\031\000\000\000\031\000\031\000\031\000\
\031\000\000\000\000\000\000\000\000\000\031\000\031\000\031\000\
\000\000\000\000\031\000\031\000\000\000\000\000\000\000\031\000\
\031\000\000\000\000\000\000\000\031\000\031\000\042\000\000\000\
\000\000\042\000\042\000\042\000\042\000\042\000\042\000\031\000\
\031\000\042\000\042\000\042\000\042\000\000\000\042\000\042\000\
\042\000\042\000\000\000\000\000\000\000\000\000\042\000\042\000\
\042\000\000\000\000\000\042\000\042\000\000\000\000\000\000\000\
\042\000\042\000\000\000\000\000\000\000\042\000\042\000\149\000\
\000\000\000\000\150\000\035\000\036\000\037\000\038\000\039\000\
\042\000\042\000\040\000\151\000\152\000\153\000\000\000\042\000\
\043\000\154\000\044\000\000\000\000\000\000\000\000\000\045\000\
\046\000\047\000\000\000\000\000\048\000\049\000\000\000\000\000\
\000\000\155\000\050\000\000\000\000\000\000\000\156\000\035\000\
\036\000\037\000\038\000\039\000\000\000\000\000\040\000\000\000\
\041\000\051\000\052\000\042\000\043\000\000\000\044\000\000\000\
\000\000\000\000\000\000\045\000\046\000\047\000\000\000\000\000\
\048\000\049\000\000\000\000\000\000\000\010\000\050\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\010\000\010\000\
\010\000\010\000\000\000\010\000\010\000\051\000\052\000\010\000\
\010\000\010\000\010\000\000\000\010\000\010\000\010\000\000\000\
\000\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\000\000\000\000\
\048\000\048\000\048\000\048\000\000\000\048\000\048\000\048\000\
\000\000\000\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\000\000\
\000\000\065\000\065\000\065\000\065\000\000\000\065\000\000\000\
\065\000\000\000\000\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\079\000\080\000\081\000\082\000\083\000\084\000\085\000\086\000\
\000\000\000\000\087\000\000\000\088\000\000\000\000\000\112\000\
\089\000\000\000\000\000\000\000\090\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\100\000\101\000\
\102\000\079\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\000\000\000\000\087\000\141\000\088\000\089\000\089\000\
\089\000\089\000\089\000\000\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\000\000\000\000\087\000\000\000\088\000\000\000\
\000\000\000\000\089\000\142\000\000\000\000\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\100\000\101\000\102\000\079\000\080\000\081\000\082\000\083\000\
\084\000\085\000\086\000\000\000\000\000\087\000\000\000\088\000\
\000\000\000\000\000\000\089\000\147\000\000\000\000\000\090\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\079\000\080\000\081\000\082\000\
\083\000\084\000\085\000\086\000\000\000\000\000\087\000\000\000\
\088\000\170\000\000\000\000\000\089\000\000\000\000\000\000\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\101\000\102\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\000\000\000\000\087\000\
\000\000\088\000\000\000\000\000\180\000\089\000\000\000\000\000\
\000\000\090\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\067\000\067\000\
\067\000\067\000\067\000\067\000\067\000\067\000\000\000\000\000\
\067\000\067\000\067\000\067\000\000\000\067\000\000\000\067\000\
\000\000\000\000\067\000\067\000\067\000\067\000\067\000\067\000\
\067\000\067\000\067\000\000\000\000\000\067\000\067\000\073\000\
\073\000\073\000\073\000\073\000\073\000\073\000\073\000\000\000\
\000\000\073\000\073\000\073\000\073\000\000\000\073\000\000\000\
\073\000\000\000\000\000\073\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\073\000\000\000\000\000\073\000\073\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\000\000\000\000\074\000\074\000\074\000\074\000\000\000\074\000\
\000\000\074\000\000\000\000\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\000\000\000\000\074\000\
\074\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
\072\000\000\000\000\000\072\000\072\000\072\000\072\000\000\000\
\072\000\000\000\072\000\000\000\000\000\072\000\072\000\072\000\
\072\000\072\000\072\000\072\000\072\000\072\000\000\000\000\000\
\072\000\072\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\000\000\000\000\071\000\071\000\071\000\071\000\
\000\000\071\000\000\000\071\000\000\000\000\000\071\000\071\000\
\071\000\071\000\071\000\071\000\071\000\071\000\071\000\000\000\
\000\000\071\000\071\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\000\000\000\000\075\000\075\000\075\000\
\075\000\000\000\075\000\000\000\075\000\000\000\000\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\000\000\000\000\075\000\075\000\092\000\092\000\092\000\092\000\
\092\000\092\000\092\000\092\000\000\000\000\000\092\000\092\000\
\092\000\092\000\000\000\092\000\000\000\092\000\000\000\000\000\
\092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
\092\000\000\000\000\000\092\000\092\000\093\000\093\000\093\000\
\093\000\093\000\093\000\093\000\093\000\000\000\000\000\093\000\
\093\000\093\000\093\000\000\000\093\000\000\000\093\000\000\000\
\000\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
\093\000\093\000\000\000\000\000\093\000\093\000\076\000\076\000\
\076\000\076\000\076\000\076\000\076\000\076\000\000\000\000\000\
\076\000\076\000\076\000\076\000\000\000\076\000\000\000\076\000\
\000\000\000\000\076\000\076\000\076\000\076\000\076\000\076\000\
\076\000\076\000\076\000\000\000\000\000\076\000\076\000\077\000\
\077\000\077\000\077\000\077\000\077\000\077\000\077\000\000\000\
\000\000\077\000\077\000\077\000\077\000\000\000\077\000\000\000\
\077\000\000\000\000\000\077\000\077\000\077\000\077\000\077\000\
\077\000\077\000\077\000\077\000\000\000\000\000\077\000\077\000\
\078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
\000\000\000\000\078\000\078\000\078\000\078\000\000\000\078\000\
\000\000\078\000\000\000\000\000\078\000\078\000\078\000\078\000\
\078\000\078\000\078\000\078\000\078\000\000\000\000\000\078\000\
\078\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\000\000\000\000\063\000\063\000\063\000\063\000\000\000\
\063\000\000\000\063\000\000\000\000\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\000\000\000\000\
\063\000\063\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\000\000\000\000\048\000\000\000\048\000\048\000\
\000\000\000\000\048\000\000\000\000\000\000\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\079\000\080\000\081\000\082\000\083\000\
\084\000\085\000\086\000\000\000\000\000\087\000\000\000\088\000\
\098\000\098\000\098\000\089\000\098\000\000\000\098\000\090\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\079\000\080\000\081\000\082\000\
\083\000\084\000\085\000\086\000\000\000\000\000\087\000\000\000\
\000\000\099\000\099\000\099\000\089\000\099\000\000\000\099\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\101\000\102\000\079\000\079\000\079\000\
\079\000\079\000\000\000\000\000\000\000\000\000\000\000\079\000\
\079\000\079\000\079\000\000\000\079\000\000\000\079\000\000\000\
\000\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
\079\000\079\000\000\000\000\000\079\000\079\000\080\000\080\000\
\080\000\080\000\080\000\000\000\000\000\000\000\000\000\000\000\
\080\000\080\000\080\000\080\000\000\000\080\000\000\000\080\000\
\000\000\000\000\080\000\080\000\080\000\080\000\080\000\080\000\
\080\000\080\000\080\000\082\000\000\000\080\000\080\000\000\000\
\000\000\000\000\000\000\000\000\000\000\082\000\082\000\082\000\
\082\000\000\000\082\000\000\000\082\000\000\000\000\000\000\000\
\000\000\000\000\081\000\082\000\082\000\082\000\082\000\082\000\
\000\000\000\000\082\000\082\000\081\000\081\000\081\000\081\000\
\000\000\081\000\000\000\081\000\000\000\000\000\000\000\000\000\
\000\000\085\000\081\000\081\000\081\000\081\000\081\000\000\000\
\000\000\081\000\081\000\085\000\085\000\085\000\085\000\000\000\
\085\000\000\000\085\000\000\000\000\000\000\000\000\000\000\000\
\086\000\085\000\085\000\085\000\085\000\085\000\000\000\000\000\
\085\000\085\000\086\000\086\000\086\000\086\000\000\000\086\000\
\000\000\086\000\000\000\000\000\000\000\000\000\000\000\083\000\
\086\000\086\000\086\000\086\000\086\000\000\000\000\000\086\000\
\086\000\083\000\083\000\083\000\083\000\000\000\083\000\000\000\
\083\000\000\000\000\000\000\000\000\000\000\000\084\000\083\000\
\083\000\083\000\083\000\083\000\000\000\000\000\083\000\083\000\
\084\000\084\000\084\000\084\000\000\000\084\000\000\000\084\000\
\000\000\000\000\000\000\000\000\000\000\087\000\084\000\084\000\
\084\000\084\000\084\000\000\000\000\000\084\000\084\000\087\000\
\087\000\087\000\087\000\000\000\087\000\000\000\087\000\000\000\
\000\000\000\000\000\000\000\000\088\000\087\000\087\000\087\000\
\087\000\087\000\000\000\000\000\087\000\087\000\088\000\088\000\
\088\000\088\000\000\000\088\000\000\000\088\000\000\000\000\000\
\000\000\000\000\000\000\000\000\088\000\088\000\088\000\088\000\
\088\000\000\000\000\000\000\000\088\000\080\000\081\000\082\000\
\083\000\084\000\085\000\086\000\095\000\095\000\095\000\000\000\
\095\000\000\000\095\000\000\000\089\000\000\000\000\000\000\000\
\090\000\091\000\092\000\093\000\000\000\000\000\000\000\000\000\
\000\000\099\000\100\000\101\000\102\000\080\000\081\000\082\000\
\083\000\084\000\085\000\086\000\096\000\096\000\096\000\000\000\
\096\000\000\000\096\000\000\000\089\000\000\000\000\000\000\000\
\090\000\091\000\092\000\093\000\000\000\000\000\000\000\000\000\
\000\000\099\000\100\000\101\000\080\000\081\000\082\000\083\000\
\084\000\085\000\086\000\097\000\097\000\097\000\000\000\097\000\
\000\000\097\000\000\000\089\000\000\000\000\000\000\000\090\000\
\091\000\092\000\093\000\000\000\000\000\000\000\000\000\000\000\
\099\000\100\000"

let yycheck = "\025\000\
\000\000\037\001\001\001\039\001\003\001\004\001\001\000\035\001\
\023\000\024\000\038\001\136\000\011\001\039\000\009\000\030\000\
\001\000\023\001\017\001\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\042\000\034\001\035\001\036\001\156\000\
\038\001\036\001\040\001\050\000\001\001\039\001\041\001\004\001\
\015\001\047\001\048\001\049\001\050\001\051\001\011\001\036\001\
\063\000\038\001\052\001\053\001\017\001\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\036\001\035\001\101\000\102\000\038\001\041\001\035\001\
\035\001\036\001\038\001\001\001\110\000\111\000\004\001\015\001\
\006\001\007\001\008\001\009\001\010\001\011\001\037\001\013\001\
\028\001\015\001\015\001\017\001\018\001\019\001\164\000\021\001\
\034\001\015\001\037\001\037\001\026\001\027\001\028\001\137\000\
\039\001\031\001\032\001\141\000\178\000\179\000\040\001\037\001\
\015\001\001\001\184\000\185\000\004\001\028\001\029\001\030\001\
\154\000\035\001\192\000\011\001\038\001\180\000\052\001\053\001\
\039\001\017\001\164\000\186\000\166\000\039\001\022\001\035\001\
\191\000\038\001\038\001\015\001\195\000\052\001\053\001\037\001\
\178\000\179\000\035\001\036\001\014\001\002\001\184\000\185\000\
\005\001\006\001\007\001\008\001\009\001\010\001\192\000\037\001\
\013\001\014\001\015\001\016\001\036\001\018\001\019\001\020\001\
\021\001\036\001\012\001\036\001\036\001\026\001\027\001\028\001\
\037\001\036\001\031\001\032\001\036\001\038\001\036\001\036\001\
\037\001\040\001\038\001\036\001\041\001\042\001\002\001\036\001\
\038\001\005\001\006\001\007\001\008\001\009\001\010\001\052\001\
\053\001\013\001\014\001\015\001\016\001\027\000\018\001\019\001\
\020\001\021\001\024\000\108\000\063\000\150\000\026\001\027\001\
\028\001\255\255\255\255\031\001\032\001\255\255\255\255\255\255\
\036\001\037\001\255\255\255\255\255\255\041\001\042\001\026\001\
\027\001\028\001\029\001\030\001\255\255\255\255\255\255\255\255\
\052\001\053\001\255\255\255\255\039\001\255\255\255\255\255\255\
\255\255\001\001\255\255\255\255\004\001\255\255\255\255\255\255\
\255\255\052\001\053\001\011\001\034\001\035\001\036\001\255\255\
\038\001\017\001\040\001\255\255\002\001\255\255\022\001\005\001\
\006\001\007\001\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\255\255\018\001\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\026\001\027\001\028\001\255\255\
\255\255\031\001\032\001\255\255\255\255\255\255\036\001\037\001\
\255\255\255\255\255\255\041\001\042\001\002\001\255\255\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\052\001\053\001\
\013\001\014\001\015\001\016\001\255\255\018\001\019\001\020\001\
\021\001\255\255\255\255\255\255\255\255\026\001\027\001\028\001\
\255\255\255\255\031\001\032\001\255\255\255\255\255\255\036\001\
\037\001\255\255\255\255\255\255\041\001\042\001\002\001\255\255\
\255\255\005\001\006\001\007\001\008\001\009\001\010\001\052\001\
\053\001\013\001\014\001\015\001\016\001\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\026\001\027\001\
\028\001\255\255\255\255\031\001\032\001\255\255\255\255\255\255\
\036\001\037\001\255\255\255\255\255\255\041\001\042\001\002\001\
\255\255\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\052\001\053\001\013\001\014\001\015\001\016\001\255\255\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\026\001\
\027\001\028\001\255\255\255\255\031\001\032\001\255\255\255\255\
\255\255\036\001\037\001\255\255\255\255\255\255\041\001\006\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\255\255\
\015\001\052\001\053\001\018\001\019\001\255\255\021\001\255\255\
\255\255\255\255\255\255\026\001\027\001\028\001\255\255\255\255\
\031\001\032\001\255\255\255\255\255\255\015\001\037\001\255\255\
\255\255\255\255\255\255\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\255\255\029\001\030\001\052\001\053\001\033\001\
\034\001\035\001\036\001\255\255\038\001\039\001\040\001\255\255\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\033\001\034\001\035\001\036\001\255\255\038\001\039\001\040\001\
\255\255\255\255\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\255\255\033\001\034\001\035\001\036\001\255\255\038\001\255\255\
\040\001\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\033\001\255\255\035\001\255\255\255\255\038\001\
\039\001\255\255\255\255\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\255\255\033\001\034\001\035\001\034\001\035\001\
\036\001\039\001\038\001\255\255\040\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\255\255\255\255\033\001\255\255\035\001\255\255\
\255\255\255\255\039\001\040\001\255\255\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\255\255\255\255\033\001\255\255\035\001\
\255\255\255\255\255\255\039\001\040\001\255\255\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\255\255\033\001\255\255\
\035\001\036\001\255\255\255\255\039\001\255\255\255\255\255\255\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\255\255\255\255\033\001\
\255\255\035\001\255\255\255\255\038\001\039\001\255\255\255\255\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\033\001\034\001\035\001\036\001\255\255\038\001\255\255\040\001\
\255\255\255\255\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\255\255\255\255\054\001\055\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\255\255\033\001\034\001\035\001\036\001\255\255\038\001\255\255\
\040\001\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\255\255\255\255\054\001\055\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\033\001\034\001\035\001\036\001\255\255\038\001\
\255\255\040\001\255\255\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\255\255\255\255\054\001\
\055\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\255\255\033\001\034\001\035\001\036\001\255\255\
\038\001\255\255\040\001\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\255\255\255\255\
\054\001\055\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\255\255\255\255\033\001\034\001\035\001\036\001\
\255\255\038\001\255\255\040\001\255\255\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\255\255\
\255\255\054\001\055\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\255\255\255\255\033\001\034\001\035\001\
\036\001\255\255\038\001\255\255\040\001\255\255\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\255\255\255\255\054\001\055\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\255\255\033\001\034\001\
\035\001\036\001\255\255\038\001\255\255\040\001\255\255\255\255\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\255\255\255\255\054\001\055\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\255\255\255\255\033\001\
\034\001\035\001\036\001\255\255\038\001\255\255\040\001\255\255\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\033\001\034\001\035\001\036\001\255\255\038\001\255\255\040\001\
\255\255\255\255\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\255\255\255\255\054\001\055\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\255\255\033\001\034\001\035\001\036\001\255\255\038\001\255\255\
\040\001\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\255\255\255\255\054\001\055\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\033\001\034\001\035\001\036\001\255\255\038\001\
\255\255\040\001\255\255\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\255\255\255\255\054\001\
\055\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\255\255\033\001\034\001\035\001\036\001\255\255\
\038\001\255\255\040\001\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\255\255\255\255\
\054\001\055\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\255\255\255\255\033\001\255\255\035\001\036\001\
\255\255\255\255\039\001\255\255\255\255\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\255\255\255\255\033\001\255\255\035\001\
\034\001\035\001\036\001\039\001\038\001\255\255\040\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\255\255\033\001\255\255\
\255\255\034\001\035\001\036\001\039\001\038\001\255\255\040\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\023\001\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\033\001\
\034\001\035\001\036\001\255\255\038\001\255\255\040\001\255\255\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\255\255\255\255\255\255\
\033\001\034\001\035\001\036\001\255\255\038\001\255\255\040\001\
\255\255\255\255\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\023\001\255\255\054\001\055\001\255\255\
\255\255\255\255\255\255\255\255\255\255\033\001\034\001\035\001\
\036\001\255\255\038\001\255\255\040\001\255\255\255\255\255\255\
\255\255\255\255\023\001\047\001\048\001\049\001\050\001\051\001\
\255\255\255\255\054\001\055\001\033\001\034\001\035\001\036\001\
\255\255\038\001\255\255\040\001\255\255\255\255\255\255\255\255\
\255\255\023\001\047\001\048\001\049\001\050\001\051\001\255\255\
\255\255\054\001\055\001\033\001\034\001\035\001\036\001\255\255\
\038\001\255\255\040\001\255\255\255\255\255\255\255\255\255\255\
\023\001\047\001\048\001\049\001\050\001\051\001\255\255\255\255\
\054\001\055\001\033\001\034\001\035\001\036\001\255\255\038\001\
\255\255\040\001\255\255\255\255\255\255\255\255\255\255\023\001\
\047\001\048\001\049\001\050\001\051\001\255\255\255\255\054\001\
\055\001\033\001\034\001\035\001\036\001\255\255\038\001\255\255\
\040\001\255\255\255\255\255\255\255\255\255\255\023\001\047\001\
\048\001\049\001\050\001\051\001\255\255\255\255\054\001\055\001\
\033\001\034\001\035\001\036\001\255\255\038\001\255\255\040\001\
\255\255\255\255\255\255\255\255\255\255\023\001\047\001\048\001\
\049\001\050\001\051\001\255\255\255\255\054\001\055\001\033\001\
\034\001\035\001\036\001\255\255\038\001\255\255\040\001\255\255\
\255\255\255\255\255\255\255\255\023\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\033\001\034\001\
\035\001\036\001\255\255\038\001\255\255\040\001\255\255\255\255\
\255\255\255\255\255\255\255\255\047\001\048\001\049\001\050\001\
\051\001\255\255\255\255\255\255\055\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\034\001\035\001\036\001\255\255\
\038\001\255\255\040\001\255\255\039\001\255\255\255\255\255\255\
\043\001\044\001\045\001\046\001\255\255\255\255\255\255\255\255\
\255\255\052\001\053\001\054\001\055\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\034\001\035\001\036\001\255\255\
\038\001\255\255\040\001\255\255\039\001\255\255\255\255\255\255\
\043\001\044\001\045\001\046\001\255\255\255\255\255\255\255\255\
\255\255\052\001\053\001\054\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\034\001\035\001\036\001\255\255\038\001\
\255\255\040\001\255\255\039\001\255\255\255\255\255\255\043\001\
\044\001\045\001\046\001\255\255\255\255\255\255\255\255\255\255\
\052\001\053\001"

let yynames_const = "\
  BOOL\000\
  BREAK\000\
  BYREF\000\
  CHAR\000\
  CONTINUE\000\
  DELETE\000\
  DOUBLE\000\
  ELSE\000\
  FALSE\000\
  FOR\000\
  IF\000\
  INT\000\
  NEW\000\
  NULL\000\
  RETURN\000\
  TRUE\000\
  VOID\000\
  ASSIGN\000\
  MORE\000\
  LESS\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  MOD\000\
  AND\000\
  EXC\000\
  QUE\000\
  DDOT\000\
  COMMA\000\
  SEMICOLON\000\
  L_PAREN\000\
  R_PAREN\000\
  L_BRACK\000\
  R_BRACK\000\
  L_BRACE\000\
  R_BRACE\000\
  EQ\000\
  NEQ\000\
  LEQ\000\
  GEQ\000\
  PLUSEQ\000\
  MINUSEQ\000\
  TIMESEQ\000\
  DIVEQ\000\
  MODEQ\000\
  INCR\000\
  DECR\000\
  LOGICAL_AND\000\
  LOGICAL_OR\000\
  EOF\000\
  "

let yynames_block = "\
  CONST_C\000\
  CONST_F\000\
  CONST_I\000\
  CONST_S\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declaration_list) in
    Obj.repr(
# 55 "parser.mly"
                              (syntaxTree := (List.rev _1); raise End_of_file )
# 731 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 58 "parser.mly"
                              ( [_1] )
# 738 "parser.ml"
               : 'declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declaration_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 59 "parser.mly"
                                      ( _2::_1 )
# 746 "parser.ml"
               : 'declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable_declaration) in
    Obj.repr(
# 66 "parser.mly"
                                  ( _1 )
# 753 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_declaration) in
    Obj.repr(
# 67 "parser.mly"
                                  ( _1 )
# 760 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 68 "parser.mly"
                                 ( _1 )
# 767 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fulltype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declarator_list) in
    Obj.repr(
# 71 "parser.mly"
                                                         ( Var_declaration(_1, List.rev _2) )
# 775 "parser.ml"
               : 'variable_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declarator) in
    Obj.repr(
# 74 "parser.mly"
                            ( [_1] )
# 782 "parser.ml"
               : 'declarator_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'declarator_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'declarator) in
    Obj.repr(
# 75 "parser.mly"
                                                  ( _3::_1 )
# 790 "parser.ml"
               : 'declarator_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'basic_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pointer) in
    Obj.repr(
# 78 "parser.mly"
                             ( Type(_1, _2) )
# 798 "parser.ml"
               : 'fulltype))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
                ( Int )
# 804 "parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
                 ( Char )
# 810 "parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                 ( Bool )
# 816 "parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
                   ( Double )
# 822 "parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
                     ( 0 )
# 828 "parser.ml"
               : 'pointer))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pointer) in
    Obj.repr(
# 88 "parser.mly"
                                   ( _1 + 1 )
# 835 "parser.ml"
               : 'pointer))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'table) in
    Obj.repr(
# 91 "parser.mly"
                     ( Declarator(Id(_1), _2) )
# 843 "parser.ml"
               : 'declarator))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
                   ( None )
# 849 "parser.ml"
               : 'table))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'constant_expression) in
    Obj.repr(
# 95 "parser.mly"
                                           ( Some(_2) )
# 856 "parser.ml"
               : 'table))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'fulltype) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list) in
    Obj.repr(
# 98 "parser.mly"
                                                                           ( Fun_declaration(_1, Id(_2), List.rev _4) )
# 865 "parser.ml"
               : 'function_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list) in
    Obj.repr(
# 99 "parser.mly"
                                                                       ( Fun_declaration(Type(Void, 0), Id(_2), List.rev _4) )
# 873 "parser.ml"
               : 'function_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'fulltype) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'declaration_list_empty) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 103 "parser.mly"
                                                                              ( Fun_definition(_1, Id(_2), _4, List.rev _7, List.rev _8) )
# 884 "parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'declaration_list_empty) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 105 "parser.mly"
                                                                              ( Fun_definition(Type(Void, 0), Id(_2), _4, List.rev _7, List.rev _8) )
# 894 "parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "parser.mly"
                            ( [] )
# 900 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parameter) in
    Obj.repr(
# 110 "parser.mly"
                          ( [_1] )
# 907 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'parameter) in
    Obj.repr(
# 111 "parser.mly"
                                               ( _3::_1 )
# 915 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fulltype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 114 "parser.mly"
                             ( Param(Byref, _2, Id(_3)) )
# 923 "parser.ml"
               : 'parameter))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fulltype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 115 "parser.mly"
                       ( Param(None, _1, Id(_2)) )
# 931 "parser.ml"
               : 'parameter))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parser.mly"
                                    ( [] )
# 937 "parser.ml"
               : 'declaration_list_empty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declaration_list_empty) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 120 "parser.mly"
                                                            ( _2::_1 )
# 945 "parser.ml"
               : 'declaration_list_empty))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "parser.mly"
                            ( [] )
# 951 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 124 "parser.mly"
                                         ( _2::_1 )
# 959 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "parser.mly"
                     ( Empty_stmt )
# 965 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 128 "parser.mly"
                                ( Expression(_1) )
# 972 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 129 "parser.mly"
                                          ( Stmt_block(List.rev _2) )
# 979 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'else_statement) in
    Obj.repr(
# 130 "parser.mly"
                                                                  ( If(_3, _5, _6) )
# 988 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'empty_expression) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'empty_expression) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'empty_expression) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 131 "parser.mly"
                                                                                                                        ( For(Some(Id(_1)), _5, _7, _9, _11) )
# 999 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'empty_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'empty_expression) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'empty_expression) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 132 "parser.mly"
                                                                                                                ( For(None, _3, _5, _7, _9) )
# 1009 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'empty_id) in
    Obj.repr(
# 133 "parser.mly"
                                       ( Continue(_2) )
# 1016 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'empty_id) in
    Obj.repr(
# 134 "parser.mly"
                                    ( Break(_2) )
# 1023 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'empty_expression) in
    Obj.repr(
# 135 "parser.mly"
                                             ( Return(_2) )
# 1030 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 138 "parser.mly"
                            ( None )
# 1036 "parser.ml"
               : 'else_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 139 "parser.mly"
                               ( Some(_2) )
# 1043 "parser.ml"
               : 'else_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "parser.mly"
                              ( None )
# 1049 "parser.ml"
               : 'empty_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 143 "parser.mly"
                           ( Some(_1) )
# 1056 "parser.ml"
               : 'empty_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 146 "parser.mly"
                      ( None )
# 1062 "parser.ml"
               : 'empty_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 147 "parser.mly"
             ( Some(Id(_1)) )
# 1069 "parser.ml"
               : 'empty_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 150 "parser.mly"
               ( Id(_1) )
# 1076 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 151 "parser.mly"
                                       ( _2 )
# 1083 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 152 "parser.mly"
                 ( True )
# 1089 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "parser.mly"
                  ( False )
# 1095 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "parser.mly"
                 ( NULL )
# 1101 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 155 "parser.mly"
                    ( INT(_1) )
# 1108 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 156 "parser.mly"
                    ( CHAR(_1) )
# 1115 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 157 "parser.mly"
                    ( FLOAT(_1) )
# 1122 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 158 "parser.mly"
                    ( STRING(_1) )
# 1129 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 159 "parser.mly"
                                               ( Fun_call(Id(_1), List.rev _3) )
# 1137 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 160 "parser.mly"
                                                  ( Table_call(_1, _3) )
# 1145 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 161 "parser.mly"
                             ( _1 )
# 1152 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binary_expression) in
    Obj.repr(
# 162 "parser.mly"
                              ( _1 )
# 1159 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_assignment) in
    Obj.repr(
# 163 "parser.mly"
                             ( _1 )
# 1166 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binary_assignment) in
    Obj.repr(
# 164 "parser.mly"
                              ( _1 )
# 1173 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fulltype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 165 "parser.mly"
                                                             ( Typecast(_2, _4) )
# 1181 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 166 "parser.mly"
                                                      ( Question(_1, _3, _5) )
# 1190 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fulltype) in
    Obj.repr(
# 167 "parser.mly"
                         ( New(_2, None) )
# 1197 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'fulltype) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 168 "parser.mly"
                                                    ( New(_2, Some(_4)) )
# 1205 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 169 "parser.mly"
                              ( Delete(_2) )
# 1212 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 184 "parser.mly"
                             ( [] )
# 1218 "parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 185 "parser.mly"
                                                  ( _3::_1 )
# 1226 "parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 188 "parser.mly"
                                ( Const_expr(_1) )
# 1233 "parser.ml"
               : 'constant_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 191 "parser.mly"
                                 ( Un_operation(AND, _2) )
# 1240 "parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 192 "parser.mly"
                                               ( Un_operation(POINT, _2) )
# 1247 "parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 193 "parser.mly"
                                            ( Un_operation(POS, _2) )
# 1254 "parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 194 "parser.mly"
                                             ( Un_operation(NEG, _2) )
# 1261 "parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 195 "parser.mly"
                                 ( Un_operation(EXC, _2) )
# 1268 "parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 198 "parser.mly"
                                               ( Bin_operation(_1, TIMES, _3) )
# 1276 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 199 "parser.mly"
                                             ( Bin_operation(_1, DIV, _3) )
# 1284 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 200 "parser.mly"
                                             ( Bin_operation(_1, MOD, _3) )
# 1292 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 201 "parser.mly"
                                              ( Bin_operation(_1, PLUS, _3))
# 1300 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 202 "parser.mly"
                                               ( Bin_operation(_1, MINUS, _3) )
# 1308 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 203 "parser.mly"
                                              ( Bin_operation(_1, LESS, _3))
# 1316 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 204 "parser.mly"
                                              ( Bin_operation(_1, MORE, _3))
# 1324 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 205 "parser.mly"
                                             ( Bin_operation(_1, LEQ, _3))
# 1332 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 206 "parser.mly"
                                             ( Bin_operation(_1, GEQ, _3))
# 1340 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 207 "parser.mly"
                                            ( Bin_operation(_1, EQ, _3))
# 1348 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 208 "parser.mly"
                                             ( Bin_operation(_1, NEQ, _3) )
# 1356 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 209 "parser.mly"
                                                     ( Bin_operation(_1, LOGICAL_AND, _3) )
# 1364 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 210 "parser.mly"
                                                    ( Bin_operation(_1, LOGICAL_OR, _3) )
# 1372 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 211 "parser.mly"
                                               ( Bin_operation(_1, COMMA, _3))
# 1380 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 214 "parser.mly"
                                  ( Un_assignment_right(_1, INCR) )
# 1387 "parser.ml"
               : 'unary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 215 "parser.mly"
                                  ( Un_assignment_right(_1, DECR) )
# 1394 "parser.ml"
               : 'unary_assignment))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 216 "parser.mly"
                                               ( Un_assignment_left(INCR, _2) )
# 1401 "parser.ml"
               : 'unary_assignment))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 217 "parser.mly"
                                               ( Un_assignment_left(DECR, _2) )
# 1408 "parser.ml"
               : 'unary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 220 "parser.mly"
                                                ( Bin_assignment(_1, ASSIGN, _3) )
# 1416 "parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 221 "parser.mly"
                                                 ( Bin_assignment(_1, TIMESEQ, _3) )
# 1424 "parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 222 "parser.mly"
                                               ( Bin_assignment(_1, DIVEQ, _3) )
# 1432 "parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 223 "parser.mly"
                                               ( Bin_assignment(_1, MODEQ, _3) )
# 1440 "parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 224 "parser.mly"
                                                ( Bin_assignment(_1, PLUSEQ, _3) )
# 1448 "parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 225 "parser.mly"
                                                 ( Bin_assignment(_1, MINUSEQ, _3) )
# 1456 "parser.ml"
               : 'binary_assignment))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
;;
# 229 "parser.mly"

(* trailer *)
# 1484 "parser.ml"
