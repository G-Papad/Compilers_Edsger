type token =
  | BOOL
  | BREAK
  | BYREF
  | CHAR
  | CONTINUE
  | CONST_C of (char)
  | CONST_F of (float)
  | CONST_I of (int)
  | CONST_S of (string)
  | DELETE
  | DOUBLE
  | ELSE
  | FALSE
  | FOR
  | ID of (string)
  | IF
  | INT
  | NEW
  | NULL
  | RETURN
  | TRUE
  | VOID
  | ASSIGN
  | MORE
  | LESS
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | AND
  | EXC
  | QUE
  | DDOT
  | COMMA
  | SEMICOLON
  | L_PAREN
  | R_PAREN
  | L_BRACK
  | R_BRACK
  | L_BRACE
  | R_BRACE
  | EQ
  | NEQ
  | LEQ
  | GEQ
  | PLUSEQ
  | MINUSEQ
  | TIMESEQ
  | DIVEQ
  | MODEQ
  | INCR
  | DECR
  | LOGICAL_AND
  | LOGICAL_OR
  | EOF

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
    open Printf
    open Ast
    open Lexer 

    let rec expr_to_list expression =
     match expression with 
     | Bin_operation(e1, COMMA, e2) -> (expr_to_list e1) @ (expr_to_list e2)
     | _ -> [expression]    
# 71 "parser.ml"
let yytransl_const = [|
  257 (* BOOL *);
  258 (* BREAK *);
  259 (* BYREF *);
  260 (* CHAR *);
  261 (* CONTINUE *);
  266 (* DELETE *);
  267 (* DOUBLE *);
  268 (* ELSE *);
  269 (* FALSE *);
  270 (* FOR *);
  272 (* IF *);
  273 (* INT *);
  274 (* NEW *);
  275 (* NULL *);
  276 (* RETURN *);
  277 (* TRUE *);
  278 (* VOID *);
  279 (* ASSIGN *);
  280 (* MORE *);
  281 (* LESS *);
  282 (* PLUS *);
  283 (* MINUS *);
  284 (* TIMES *);
  285 (* DIV *);
  286 (* MOD *);
  287 (* AND *);
  288 (* EXC *);
  289 (* QUE *);
  290 (* DDOT *);
  291 (* COMMA *);
  292 (* SEMICOLON *);
  293 (* L_PAREN *);
  294 (* R_PAREN *);
  295 (* L_BRACK *);
  296 (* R_BRACK *);
  297 (* L_BRACE *);
  298 (* R_BRACE *);
  299 (* EQ *);
  300 (* NEQ *);
  301 (* LEQ *);
  302 (* GEQ *);
  303 (* PLUSEQ *);
  304 (* MINUSEQ *);
  305 (* TIMESEQ *);
  306 (* DIVEQ *);
  307 (* MODEQ *);
  308 (* INCR *);
  309 (* DECR *);
  310 (* LOGICAL_AND *);
  311 (* LOGICAL_OR *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  262 (* CONST_C *);
  263 (* CONST_F *);
  264 (* CONST_I *);
  265 (* CONST_S *);
  271 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\004\000\004\000\
\008\000\008\000\007\000\010\000\010\000\010\000\010\000\011\000\
\011\000\009\000\012\000\012\000\005\000\005\000\006\000\006\000\
\014\000\014\000\014\000\017\000\017\000\015\000\015\000\016\000\
\016\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\020\000\020\000\021\000\021\000\022\000\022\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\013\000\023\000\023\000\
\023\000\023\000\023\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\025\000\025\000\025\000\025\000\026\000\026\000\026\000\
\026\000\026\000\026\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\001\000\001\000\001\000\003\000\003\000\
\001\000\003\000\002\000\001\000\001\000\001\000\001\000\000\000\
\002\000\002\000\000\000\003\000\006\000\006\000\009\000\009\000\
\000\000\001\000\003\000\003\000\002\000\000\000\002\000\000\000\
\002\000\001\000\002\000\003\000\006\000\011\000\009\000\003\000\
\003\000\003\000\000\000\002\000\000\000\001\000\000\000\001\000\
\001\000\003\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\004\000\004\000\001\000\001\000\001\000\001\000\
\004\000\005\000\002\000\005\000\002\000\001\000\002\000\002\000\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\002\000\002\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\014\000\013\000\015\000\012\000\000\000\
\100\000\000\000\002\000\004\000\005\000\006\000\000\000\016\000\
\000\000\000\000\009\000\000\000\001\000\003\000\000\000\000\000\
\000\000\000\000\018\000\000\000\008\000\000\000\000\000\007\000\
\017\000\055\000\056\000\054\000\057\000\000\000\052\000\000\000\
\000\000\053\000\051\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\061\000\062\000\063\000\
\064\000\010\000\000\000\000\000\000\000\026\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\090\000\091\000\000\000\000\000\000\000\029\000\000\000\000\000\
\000\000\058\000\000\000\000\000\000\000\050\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\000\027\000\022\000\030\000\
\021\000\030\000\059\000\000\000\000\000\000\000\060\000\000\000\
\000\000\068\000\000\000\031\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\034\000\032\000\024\000\033\000\
\000\000\023\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\035\000\041\000\040\000\000\000\000\000\
\000\000\042\000\036\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\000\000\000\000\044\000\
\000\000\000\000\039\000\000\000\000\000\038\000"

let yydgoto = "\002\000\
\009\000\010\000\148\000\012\000\013\000\014\000\015\000\018\000\
\019\000\016\000\025\000\027\000\052\000\061\000\144\000\149\000\
\062\000\160\000\161\000\189\000\170\000\164\000\054\000\055\000\
\056\000\057\000"

let yysindex = "\005\000\
\127\255\000\000\243\254\000\000\000\000\000\000\000\000\251\254\
\000\000\001\000\000\000\000\000\000\000\000\000\015\255\000\000\
\001\255\082\255\000\000\010\255\000\000\000\000\009\255\116\255\
\043\255\214\000\000\000\243\254\000\000\032\255\032\255\000\000\
\000\000\000\000\000\000\000\000\000\000\214\000\000\000\058\255\
\102\255\000\000\000\000\214\000\214\000\214\000\214\000\214\000\
\083\255\214\000\214\000\057\255\226\003\000\000\000\000\000\000\
\000\000\000\000\102\255\084\255\070\255\000\000\108\255\033\255\
\178\000\090\255\033\255\033\255\033\255\033\255\033\255\101\255\
\078\001\033\255\033\255\000\000\214\000\214\000\214\000\214\000\
\214\000\214\000\214\000\214\000\214\000\214\000\214\000\214\000\
\214\000\214\000\214\000\214\000\214\000\214\000\214\000\214\000\
\000\000\000\000\214\000\214\000\118\255\000\000\032\255\071\255\
\109\255\000\000\111\001\214\000\214\000\000\000\003\004\095\255\
\095\255\231\254\231\254\033\255\033\255\033\255\144\001\003\004\
\177\001\095\255\095\255\095\255\095\255\003\004\003\004\003\004\
\003\004\003\004\098\005\067\005\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\210\001\033\255\214\000\000\000\127\255\
\127\255\000\000\035\005\000\000\157\255\198\255\154\255\154\255\
\137\255\119\255\143\255\214\000\000\000\000\000\000\000\000\000\
\243\001\000\000\000\000\145\255\150\255\214\000\173\255\214\000\
\226\003\155\255\019\000\000\000\000\000\000\000\156\255\153\255\
\020\002\000\000\000\000\214\000\214\000\142\000\159\255\160\255\
\185\255\214\000\214\000\142\000\000\000\163\255\166\255\000\000\
\142\000\214\000\000\000\177\255\142\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\122\255\000\000\000\000\000\000\000\000\000\000\122\255\000\000\
\235\000\000\000\000\000\000\000\000\000\144\255\144\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\180\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\053\002\
\000\000\045\001\086\002\119\002\152\002\185\002\218\002\000\000\
\000\000\251\002\028\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\229\254\098\004\
\121\004\036\004\069\004\061\003\094\003\127\003\000\000\041\255\
\000\000\144\004\167\004\190\004\213\004\207\255\229\255\146\001\
\228\003\005\004\236\004\003\005\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\160\003\000\000\000\000\060\000\
\060\000\000\000\122\005\000\000\000\000\000\000\186\255\186\255\
\000\000\193\003\000\000\187\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\187\255\000\000\000\000\
\042\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\187\255\187\255\000\000\000\000\000\000\
\101\000\183\255\187\255\000\000\000\000\000\000\000\000\000\000\
\000\000\183\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\040\000\000\000\000\000\000\000\241\255\212\000\
\200\000\000\000\000\000\000\000\000\000\201\000\093\000\140\255\
\130\000\200\255\230\255\000\000\107\255\084\000\000\000\000\000\
\000\000\000\000"

let yytablesize = 1709
let yytable = "\053\000\
\021\000\017\000\082\000\083\000\084\000\001\000\094\000\094\000\
\094\000\020\000\094\000\064\000\094\000\087\000\060\000\060\000\
\175\000\067\000\068\000\069\000\070\000\071\000\073\000\074\000\
\075\000\066\000\097\000\098\000\150\000\023\000\183\000\184\000\
\004\000\072\000\059\000\005\000\190\000\191\000\107\000\026\000\
\011\000\171\000\006\000\101\000\196\000\031\000\030\000\026\000\
\007\000\022\000\111\000\112\000\113\000\114\000\115\000\116\000\
\117\000\118\000\119\000\120\000\121\000\122\000\123\000\124\000\
\125\000\126\000\127\000\128\000\129\000\130\000\033\000\087\000\
\131\000\132\000\089\000\089\000\089\000\046\000\089\000\046\000\
\089\000\140\000\141\000\004\000\097\000\098\000\005\000\060\000\
\034\000\035\000\036\000\037\000\038\000\006\000\065\000\039\000\
\076\000\040\000\102\000\007\000\041\000\042\000\004\000\043\000\
\103\000\005\000\135\000\104\000\044\000\045\000\046\000\136\000\
\006\000\047\000\048\000\147\000\028\000\029\000\007\000\049\000\
\080\000\081\000\082\000\083\000\084\000\185\000\003\000\004\000\
\108\000\169\000\005\000\192\000\133\000\087\000\050\000\051\000\
\195\000\006\000\109\000\169\000\198\000\177\000\103\000\007\000\
\137\000\105\000\097\000\098\000\008\000\138\000\028\000\032\000\
\167\000\169\000\169\000\065\000\019\000\019\000\151\000\169\000\
\169\000\152\000\034\000\035\000\036\000\037\000\038\000\169\000\
\163\000\039\000\153\000\154\000\155\000\166\000\041\000\042\000\
\156\000\043\000\025\000\168\000\173\000\025\000\044\000\045\000\
\046\000\174\000\176\000\047\000\048\000\181\000\178\000\180\000\
\157\000\049\000\186\000\187\000\188\000\158\000\159\000\151\000\
\193\000\194\000\152\000\034\000\035\000\036\000\037\000\038\000\
\050\000\051\000\039\000\153\000\154\000\155\000\197\000\041\000\
\042\000\156\000\043\000\070\000\045\000\047\000\045\000\044\000\
\045\000\046\000\024\000\058\000\047\000\048\000\145\000\063\000\
\134\000\157\000\049\000\165\000\000\000\000\000\158\000\162\000\
\098\000\098\000\098\000\000\000\098\000\000\000\098\000\000\000\
\000\000\050\000\051\000\000\000\000\000\000\000\000\000\000\000\
\003\000\004\000\000\000\000\000\005\000\000\000\099\000\099\000\
\099\000\000\000\099\000\006\000\099\000\000\000\000\000\000\000\
\000\000\007\000\000\000\000\000\151\000\000\000\008\000\152\000\
\034\000\035\000\036\000\037\000\038\000\000\000\000\000\039\000\
\153\000\154\000\155\000\000\000\041\000\042\000\156\000\043\000\
\000\000\000\000\000\000\000\000\044\000\045\000\046\000\000\000\
\000\000\047\000\048\000\000\000\000\000\000\000\157\000\049\000\
\000\000\000\000\000\000\158\000\179\000\032\000\000\000\000\000\
\032\000\032\000\032\000\032\000\032\000\032\000\050\000\051\000\
\032\000\032\000\032\000\032\000\000\000\032\000\032\000\032\000\
\032\000\000\000\000\000\000\000\000\000\032\000\032\000\032\000\
\000\000\000\000\032\000\032\000\000\000\000\000\000\000\032\000\
\032\000\000\000\000\000\000\000\032\000\032\000\043\000\000\000\
\000\000\043\000\043\000\043\000\043\000\043\000\043\000\032\000\
\032\000\043\000\043\000\043\000\043\000\000\000\043\000\043\000\
\043\000\043\000\000\000\000\000\000\000\000\000\043\000\043\000\
\043\000\000\000\000\000\043\000\043\000\000\000\000\000\000\000\
\043\000\043\000\000\000\000\000\000\000\043\000\043\000\151\000\
\000\000\000\000\152\000\034\000\035\000\036\000\037\000\038\000\
\043\000\043\000\039\000\153\000\154\000\155\000\000\000\041\000\
\042\000\156\000\043\000\000\000\000\000\000\000\000\000\044\000\
\045\000\046\000\000\000\000\000\047\000\048\000\000\000\000\000\
\000\000\157\000\049\000\000\000\000\000\000\000\158\000\034\000\
\035\000\036\000\037\000\038\000\000\000\000\000\039\000\000\000\
\040\000\050\000\051\000\041\000\042\000\000\000\043\000\000\000\
\000\000\000\000\000\000\044\000\045\000\046\000\000\000\000\000\
\047\000\048\000\000\000\000\000\000\000\000\000\049\000\106\000\
\000\000\000\000\000\000\034\000\035\000\036\000\037\000\038\000\
\000\000\000\000\039\000\000\000\040\000\050\000\051\000\041\000\
\042\000\000\000\043\000\000\000\000\000\000\000\000\000\044\000\
\045\000\046\000\000\000\000\000\047\000\048\000\000\000\000\000\
\000\000\011\000\049\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\011\000\011\000\011\000\011\000\000\000\011\000\
\011\000\050\000\051\000\011\000\011\000\011\000\011\000\000\000\
\011\000\011\000\011\000\000\000\000\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\000\000\000\000\049\000\049\000\049\000\049\000\
\000\000\049\000\049\000\049\000\000\000\000\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\067\000\067\000\067\000\067\000\067\000\
\067\000\067\000\067\000\000\000\000\000\067\000\067\000\067\000\
\067\000\000\000\067\000\000\000\067\000\000\000\000\000\067\000\
\067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
\067\000\067\000\067\000\067\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\084\000\000\000\000\000\085\000\000\000\
\086\000\000\000\000\000\110\000\087\000\000\000\000\000\000\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\084\000\000\000\000\000\085\000\
\000\000\086\000\000\000\000\000\139\000\087\000\000\000\000\000\
\000\000\088\000\089\000\090\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\077\000\078\000\
\079\000\080\000\081\000\082\000\083\000\084\000\000\000\000\000\
\085\000\142\000\086\000\095\000\095\000\095\000\087\000\095\000\
\000\000\095\000\088\000\089\000\090\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\100\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\084\000\000\000\
\000\000\085\000\000\000\086\000\000\000\000\000\000\000\087\000\
\143\000\000\000\000\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\084\000\
\000\000\000\000\085\000\000\000\086\000\000\000\000\000\000\000\
\087\000\146\000\000\000\000\000\088\000\089\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\100\000\077\000\078\000\079\000\080\000\081\000\082\000\083\000\
\084\000\000\000\000\000\085\000\000\000\086\000\172\000\000\000\
\000\000\087\000\000\000\000\000\000\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\084\000\000\000\000\000\085\000\000\000\086\000\000\000\
\000\000\182\000\087\000\000\000\000\000\000\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\069\000\069\000\069\000\069\000\069\000\
\069\000\069\000\069\000\000\000\000\000\069\000\069\000\069\000\
\069\000\000\000\069\000\000\000\069\000\000\000\000\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\000\000\000\000\069\000\069\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\073\000\000\000\000\000\073\000\073\000\
\073\000\073\000\000\000\073\000\000\000\073\000\000\000\000\000\
\073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
\073\000\000\000\000\000\073\000\073\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\000\000\000\000\074\000\
\074\000\074\000\074\000\000\000\074\000\000\000\074\000\000\000\
\000\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\000\000\000\000\074\000\074\000\072\000\072\000\
\072\000\072\000\072\000\072\000\072\000\072\000\000\000\000\000\
\072\000\072\000\072\000\072\000\000\000\072\000\000\000\072\000\
\000\000\000\000\072\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\000\000\000\000\072\000\072\000\071\000\
\071\000\071\000\071\000\071\000\071\000\071\000\071\000\000\000\
\000\000\071\000\071\000\071\000\071\000\000\000\071\000\000\000\
\071\000\000\000\000\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\000\000\000\000\071\000\071\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\000\000\000\000\075\000\075\000\075\000\075\000\000\000\075\000\
\000\000\075\000\000\000\000\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\000\000\000\000\075\000\
\075\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
\092\000\000\000\000\000\092\000\092\000\092\000\092\000\000\000\
\092\000\000\000\092\000\000\000\000\000\092\000\092\000\092\000\
\092\000\092\000\092\000\092\000\092\000\092\000\000\000\000\000\
\092\000\092\000\093\000\093\000\093\000\093\000\093\000\093\000\
\093\000\093\000\000\000\000\000\093\000\093\000\093\000\093\000\
\000\000\093\000\000\000\093\000\000\000\000\000\093\000\093\000\
\093\000\093\000\093\000\093\000\093\000\093\000\093\000\000\000\
\000\000\093\000\093\000\076\000\076\000\076\000\076\000\076\000\
\076\000\076\000\076\000\000\000\000\000\076\000\076\000\076\000\
\076\000\000\000\076\000\000\000\076\000\000\000\000\000\076\000\
\076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
\000\000\000\000\076\000\076\000\077\000\077\000\077\000\077\000\
\077\000\077\000\077\000\077\000\000\000\000\000\077\000\077\000\
\077\000\077\000\000\000\077\000\000\000\077\000\000\000\000\000\
\077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
\077\000\000\000\000\000\077\000\077\000\078\000\078\000\078\000\
\078\000\078\000\078\000\078\000\078\000\000\000\000\000\078\000\
\078\000\078\000\078\000\000\000\078\000\000\000\078\000\000\000\
\000\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
\078\000\078\000\000\000\000\000\078\000\078\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\000\000\000\000\
\065\000\065\000\065\000\065\000\000\000\065\000\000\000\065\000\
\000\000\000\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\000\000\000\000\065\000\065\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\000\000\
\000\000\049\000\000\000\049\000\049\000\000\000\000\000\049\000\
\000\000\000\000\000\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\084\000\
\000\000\000\000\085\000\000\000\086\000\096\000\096\000\096\000\
\087\000\096\000\000\000\096\000\088\000\089\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\100\000\077\000\078\000\079\000\080\000\081\000\082\000\083\000\
\084\000\000\000\000\000\085\000\000\000\000\000\097\000\097\000\
\097\000\087\000\097\000\000\000\097\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\079\000\079\000\079\000\079\000\079\000\000\000\
\000\000\000\000\000\000\000\000\079\000\079\000\079\000\079\000\
\000\000\079\000\000\000\079\000\000\000\000\000\079\000\079\000\
\079\000\079\000\079\000\079\000\079\000\079\000\079\000\000\000\
\000\000\079\000\079\000\080\000\080\000\080\000\080\000\080\000\
\000\000\000\000\000\000\000\000\000\000\080\000\080\000\080\000\
\080\000\000\000\080\000\000\000\080\000\000\000\000\000\080\000\
\080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
\082\000\000\000\080\000\080\000\000\000\000\000\000\000\000\000\
\000\000\000\000\082\000\082\000\082\000\082\000\000\000\082\000\
\000\000\082\000\000\000\000\000\000\000\000\000\000\000\081\000\
\082\000\082\000\082\000\082\000\082\000\000\000\000\000\082\000\
\082\000\081\000\081\000\081\000\081\000\000\000\081\000\000\000\
\081\000\000\000\000\000\000\000\000\000\000\000\085\000\081\000\
\081\000\081\000\081\000\081\000\000\000\000\000\081\000\081\000\
\085\000\085\000\085\000\085\000\000\000\085\000\000\000\085\000\
\000\000\000\000\000\000\000\000\000\000\086\000\085\000\085\000\
\085\000\085\000\085\000\000\000\000\000\085\000\085\000\086\000\
\086\000\086\000\086\000\000\000\086\000\000\000\086\000\000\000\
\000\000\000\000\000\000\000\000\083\000\086\000\086\000\086\000\
\086\000\086\000\000\000\000\000\086\000\086\000\083\000\083\000\
\083\000\083\000\000\000\083\000\000\000\083\000\000\000\000\000\
\000\000\000\000\000\000\084\000\083\000\083\000\083\000\083\000\
\083\000\000\000\000\000\083\000\083\000\084\000\084\000\084\000\
\084\000\000\000\084\000\000\000\084\000\000\000\000\000\000\000\
\000\000\000\000\087\000\084\000\084\000\084\000\084\000\084\000\
\000\000\000\000\084\000\084\000\087\000\087\000\087\000\087\000\
\000\000\087\000\000\000\087\000\000\000\000\000\000\000\000\000\
\000\000\088\000\087\000\087\000\087\000\087\000\087\000\000\000\
\000\000\087\000\087\000\088\000\088\000\088\000\088\000\000\000\
\088\000\000\000\088\000\000\000\000\000\000\000\000\000\000\000\
\000\000\088\000\088\000\088\000\088\000\088\000\000\000\000\000\
\000\000\088\000\078\000\079\000\080\000\081\000\082\000\083\000\
\084\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\087\000\000\000\000\000\000\000\088\000\089\000\090\000\
\091\000\000\000\000\000\000\000\000\000\000\000\097\000\098\000\
\099\000\100\000\078\000\079\000\080\000\081\000\082\000\083\000\
\084\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\087\000\000\000\000\000\000\000\088\000\089\000\090\000\
\091\000\000\000\000\000\000\000\000\000\000\000\097\000\098\000\
\099\000\078\000\079\000\080\000\081\000\082\000\083\000\084\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\087\000\000\000\000\000\000\000\088\000\089\000\090\000\091\000\
\066\000\000\000\000\000\000\000\000\000\097\000\098\000\000\000\
\000\000\000\000\000\000\066\000\066\000\066\000\000\000\066\000\
\000\000\066\000\000\000\000\000\000\000\000\000\000\000\000\000\
\066\000\066\000\066\000\066\000\066\000"

let yycheck = "\026\000\
\000\000\015\001\028\001\029\001\030\001\001\000\034\001\035\001\
\036\001\015\001\038\001\038\000\040\001\039\001\030\000\031\000\
\166\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\051\000\041\000\052\001\053\001\145\000\015\001\180\000\181\000\
\001\001\049\000\003\001\004\001\186\000\187\000\065\000\039\001\
\001\000\158\000\011\001\059\000\194\000\037\001\037\001\039\001\
\017\001\010\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\095\000\096\000\028\001\039\001\
\099\000\100\000\034\001\035\001\036\001\036\001\038\001\038\001\
\040\001\108\000\109\000\001\001\052\001\053\001\004\001\103\000\
\006\001\007\001\008\001\009\001\010\001\011\001\037\001\013\001\
\040\001\015\001\015\001\017\001\018\001\019\001\001\001\021\001\
\035\001\004\001\036\001\038\001\026\001\027\001\028\001\041\001\
\011\001\031\001\032\001\142\000\035\001\036\001\017\001\037\001\
\026\001\027\001\028\001\029\001\030\001\182\000\000\001\001\001\
\039\001\156\000\004\001\188\000\015\001\039\001\052\001\053\001\
\193\000\011\001\038\001\166\000\197\000\168\000\035\001\017\001\
\036\001\038\001\052\001\053\001\022\001\041\001\035\001\036\001\
\034\001\180\000\181\000\037\001\035\001\036\001\002\001\186\000\
\187\000\005\001\006\001\007\001\008\001\009\001\010\001\194\000\
\015\001\013\001\014\001\015\001\016\001\037\001\018\001\019\001\
\020\001\021\001\035\001\037\001\036\001\038\001\026\001\027\001\
\028\001\036\001\014\001\031\001\032\001\037\001\036\001\036\001\
\036\001\037\001\036\001\036\001\012\001\041\001\042\001\002\001\
\038\001\036\001\005\001\006\001\007\001\008\001\009\001\010\001\
\052\001\053\001\013\001\014\001\015\001\016\001\038\001\018\001\
\019\001\020\001\021\001\040\001\038\001\036\001\036\001\026\001\
\027\001\028\001\015\000\028\000\031\001\032\001\138\000\031\000\
\103\000\036\001\037\001\152\000\255\255\255\255\041\001\042\001\
\034\001\035\001\036\001\255\255\038\001\255\255\040\001\255\255\
\255\255\052\001\053\001\255\255\255\255\255\255\255\255\255\255\
\000\001\001\001\255\255\255\255\004\001\255\255\034\001\035\001\
\036\001\255\255\038\001\011\001\040\001\255\255\255\255\255\255\
\255\255\017\001\255\255\255\255\002\001\255\255\022\001\005\001\
\006\001\007\001\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\255\255\018\001\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\026\001\027\001\028\001\255\255\
\255\255\031\001\032\001\255\255\255\255\255\255\036\001\037\001\
\255\255\255\255\255\255\041\001\042\001\002\001\255\255\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\052\001\053\001\
\013\001\014\001\015\001\016\001\255\255\018\001\019\001\020\001\
\021\001\255\255\255\255\255\255\255\255\026\001\027\001\028\001\
\255\255\255\255\031\001\032\001\255\255\255\255\255\255\036\001\
\037\001\255\255\255\255\255\255\041\001\042\001\002\001\255\255\
\255\255\005\001\006\001\007\001\008\001\009\001\010\001\052\001\
\053\001\013\001\014\001\015\001\016\001\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\026\001\027\001\
\028\001\255\255\255\255\031\001\032\001\255\255\255\255\255\255\
\036\001\037\001\255\255\255\255\255\255\041\001\042\001\002\001\
\255\255\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\052\001\053\001\013\001\014\001\015\001\016\001\255\255\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\026\001\
\027\001\028\001\255\255\255\255\031\001\032\001\255\255\255\255\
\255\255\036\001\037\001\255\255\255\255\255\255\041\001\006\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\255\255\
\015\001\052\001\053\001\018\001\019\001\255\255\021\001\255\255\
\255\255\255\255\255\255\026\001\027\001\028\001\255\255\255\255\
\031\001\032\001\255\255\255\255\255\255\255\255\037\001\038\001\
\255\255\255\255\255\255\006\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\255\255\015\001\052\001\053\001\018\001\
\019\001\255\255\021\001\255\255\255\255\255\255\255\255\026\001\
\027\001\028\001\255\255\255\255\031\001\032\001\255\255\255\255\
\255\255\015\001\037\001\255\255\255\255\255\255\255\255\255\255\
\255\255\023\001\024\001\025\001\026\001\027\001\255\255\029\001\
\030\001\052\001\053\001\033\001\034\001\035\001\036\001\255\255\
\038\001\039\001\040\001\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\255\255\255\255\033\001\034\001\035\001\036\001\
\255\255\038\001\039\001\040\001\255\255\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\255\255\255\255\033\001\034\001\035\001\
\036\001\255\255\038\001\255\255\040\001\255\255\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\255\255\033\001\255\255\
\035\001\255\255\255\255\038\001\039\001\255\255\255\255\255\255\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\255\255\255\255\033\001\
\255\255\035\001\255\255\255\255\038\001\039\001\255\255\255\255\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\033\001\034\001\035\001\034\001\035\001\036\001\039\001\038\001\
\255\255\040\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\255\255\033\001\255\255\035\001\255\255\255\255\255\255\039\001\
\040\001\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\033\001\255\255\035\001\255\255\255\255\255\255\
\039\001\040\001\255\255\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\255\255\033\001\255\255\035\001\036\001\255\255\
\255\255\039\001\255\255\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\255\255\255\255\033\001\255\255\035\001\255\255\
\255\255\038\001\039\001\255\255\255\255\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\255\255\255\255\033\001\034\001\035\001\
\036\001\255\255\038\001\255\255\040\001\255\255\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\255\255\255\255\054\001\055\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\255\255\033\001\034\001\
\035\001\036\001\255\255\038\001\255\255\040\001\255\255\255\255\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\255\255\255\255\054\001\055\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\255\255\255\255\033\001\
\034\001\035\001\036\001\255\255\038\001\255\255\040\001\255\255\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\033\001\034\001\035\001\036\001\255\255\038\001\255\255\040\001\
\255\255\255\255\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\255\255\255\255\054\001\055\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\255\255\033\001\034\001\035\001\036\001\255\255\038\001\255\255\
\040\001\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\255\255\255\255\054\001\055\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\033\001\034\001\035\001\036\001\255\255\038\001\
\255\255\040\001\255\255\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\255\255\255\255\054\001\
\055\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\255\255\033\001\034\001\035\001\036\001\255\255\
\038\001\255\255\040\001\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\255\255\255\255\
\054\001\055\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\255\255\255\255\033\001\034\001\035\001\036\001\
\255\255\038\001\255\255\040\001\255\255\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\255\255\
\255\255\054\001\055\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\255\255\255\255\033\001\034\001\035\001\
\036\001\255\255\038\001\255\255\040\001\255\255\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\255\255\255\255\054\001\055\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\255\255\033\001\034\001\
\035\001\036\001\255\255\038\001\255\255\040\001\255\255\255\255\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\255\255\255\255\054\001\055\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\255\255\255\255\033\001\
\034\001\035\001\036\001\255\255\038\001\255\255\040\001\255\255\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\033\001\034\001\035\001\036\001\255\255\038\001\255\255\040\001\
\255\255\255\255\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\255\255\255\255\054\001\055\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\255\255\033\001\255\255\035\001\036\001\255\255\255\255\039\001\
\255\255\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\033\001\255\255\035\001\034\001\035\001\036\001\
\039\001\038\001\255\255\040\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\255\255\033\001\255\255\255\255\034\001\035\001\
\036\001\039\001\038\001\255\255\040\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\023\001\024\001\025\001\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\033\001\034\001\035\001\036\001\
\255\255\038\001\255\255\040\001\255\255\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\255\255\
\255\255\054\001\055\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\033\001\034\001\035\001\
\036\001\255\255\038\001\255\255\040\001\255\255\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\023\001\255\255\054\001\055\001\255\255\255\255\255\255\255\255\
\255\255\255\255\033\001\034\001\035\001\036\001\255\255\038\001\
\255\255\040\001\255\255\255\255\255\255\255\255\255\255\023\001\
\047\001\048\001\049\001\050\001\051\001\255\255\255\255\054\001\
\055\001\033\001\034\001\035\001\036\001\255\255\038\001\255\255\
\040\001\255\255\255\255\255\255\255\255\255\255\023\001\047\001\
\048\001\049\001\050\001\051\001\255\255\255\255\054\001\055\001\
\033\001\034\001\035\001\036\001\255\255\038\001\255\255\040\001\
\255\255\255\255\255\255\255\255\255\255\023\001\047\001\048\001\
\049\001\050\001\051\001\255\255\255\255\054\001\055\001\033\001\
\034\001\035\001\036\001\255\255\038\001\255\255\040\001\255\255\
\255\255\255\255\255\255\255\255\023\001\047\001\048\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\033\001\034\001\
\035\001\036\001\255\255\038\001\255\255\040\001\255\255\255\255\
\255\255\255\255\255\255\023\001\047\001\048\001\049\001\050\001\
\051\001\255\255\255\255\054\001\055\001\033\001\034\001\035\001\
\036\001\255\255\038\001\255\255\040\001\255\255\255\255\255\255\
\255\255\255\255\023\001\047\001\048\001\049\001\050\001\051\001\
\255\255\255\255\054\001\055\001\033\001\034\001\035\001\036\001\
\255\255\038\001\255\255\040\001\255\255\255\255\255\255\255\255\
\255\255\023\001\047\001\048\001\049\001\050\001\051\001\255\255\
\255\255\054\001\055\001\033\001\034\001\035\001\036\001\255\255\
\038\001\255\255\040\001\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\048\001\049\001\050\001\051\001\255\255\255\255\
\255\255\055\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\039\001\255\255\255\255\255\255\043\001\044\001\045\001\
\046\001\255\255\255\255\255\255\255\255\255\255\052\001\053\001\
\054\001\055\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\039\001\255\255\255\255\255\255\043\001\044\001\045\001\
\046\001\255\255\255\255\255\255\255\255\255\255\052\001\053\001\
\054\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\039\001\255\255\255\255\255\255\043\001\044\001\045\001\046\001\
\023\001\255\255\255\255\255\255\255\255\052\001\053\001\255\255\
\255\255\255\255\255\255\034\001\035\001\036\001\255\255\038\001\
\255\255\040\001\255\255\255\255\255\255\255\255\255\255\255\255\
\047\001\048\001\049\001\050\001\051\001"

let yynames_const = "\
  BOOL\000\
  BREAK\000\
  BYREF\000\
  CHAR\000\
  CONTINUE\000\
  DELETE\000\
  DOUBLE\000\
  ELSE\000\
  FALSE\000\
  FOR\000\
  IF\000\
  INT\000\
  NEW\000\
  NULL\000\
  RETURN\000\
  TRUE\000\
  VOID\000\
  ASSIGN\000\
  MORE\000\
  LESS\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  MOD\000\
  AND\000\
  EXC\000\
  QUE\000\
  DDOT\000\
  COMMA\000\
  SEMICOLON\000\
  L_PAREN\000\
  R_PAREN\000\
  L_BRACK\000\
  R_BRACK\000\
  L_BRACE\000\
  R_BRACE\000\
  EQ\000\
  NEQ\000\
  LEQ\000\
  GEQ\000\
  PLUSEQ\000\
  MINUSEQ\000\
  TIMESEQ\000\
  DIVEQ\000\
  MODEQ\000\
  INCR\000\
  DECR\000\
  LOGICAL_AND\000\
  LOGICAL_OR\000\
  EOF\000\
  "

let yynames_block = "\
  CONST_C\000\
  CONST_F\000\
  CONST_I\000\
  CONST_S\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declaration_list) in
    Obj.repr(
# 61 "parser.mly"
                              (syntaxTree := List.rev _1; raise End_of_file )
# 759 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 64 "parser.mly"
                              ( [_1] )
# 766 "parser.ml"
               : 'declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declaration_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 65 "parser.mly"
                                      ( _2::_1 )
# 774 "parser.ml"
               : 'declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable_declaration) in
    Obj.repr(
# 72 "parser.mly"
                                  ( _1 )
# 781 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_declaration) in
    Obj.repr(
# 73 "parser.mly"
                                  ( _1 )
# 788 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 74 "parser.mly"
                                 ( _1 )
# 795 "parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fulltype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declarator_list) in
    Obj.repr(
# 77 "parser.mly"
                                                         ( Var_declaration(_1, List.rev _2) )
# 803 "parser.ml"
               : 'variable_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declarator_list) in
    Obj.repr(
# 78 "parser.mly"
                                                      ( print_endline("Syntax error: Wrong type at line " ^ (string_of_int !line_number)); Var_declaration(Type(Void, 0), []))
# 810 "parser.ml"
               : 'variable_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declarator) in
    Obj.repr(
# 82 "parser.mly"
                            ( [_1] )
# 817 "parser.ml"
               : 'declarator_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'declarator_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'declarator) in
    Obj.repr(
# 83 "parser.mly"
                                                  ( _3::_1 )
# 825 "parser.ml"
               : 'declarator_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'basic_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pointer) in
    Obj.repr(
# 86 "parser.mly"
                             ( Type(_1, _2) )
# 833 "parser.ml"
               : 'fulltype))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
                ( Int )
# 839 "parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
                 ( Char )
# 845 "parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                 ( Bool )
# 851 "parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
                   ( Double )
# 857 "parser.ml"
               : 'basic_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
                     ( 0 )
# 863 "parser.ml"
               : 'pointer))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pointer) in
    Obj.repr(
# 96 "parser.mly"
                                   ( _1 + 1 )
# 870 "parser.ml"
               : 'pointer))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'table) in
    Obj.repr(
# 99 "parser.mly"
                     ( Declarator(Id(_1), _2) )
# 878 "parser.ml"
               : 'declarator))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "parser.mly"
                   ( None )
# 884 "parser.ml"
               : 'table))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'constant_expression) in
    Obj.repr(
# 103 "parser.mly"
                                           ( Some(_2) )
# 891 "parser.ml"
               : 'table))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'fulltype) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list) in
    Obj.repr(
# 106 "parser.mly"
                                                                           ( Fun_declaration(_1, Id(_2), List.rev _4) )
# 900 "parser.ml"
               : 'function_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list) in
    Obj.repr(
# 107 "parser.mly"
                                                                       ( Fun_declaration(Type(Void, 0), Id(_2), List.rev _4) )
# 908 "parser.ml"
               : 'function_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'fulltype) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'declaration_list_empty) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 111 "parser.mly"
                                                                              ( Fun_definition(_1, Id(_2), List.rev _4, List.rev _7, List.rev _8) )
# 919 "parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'declaration_list_empty) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 113 "parser.mly"
                                                                              ( Fun_definition(Type(Void, 0), Id(_2), List.rev _4, List.rev _7, List.rev _8) )
# 929 "parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "parser.mly"
                            ( [] )
# 935 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parameter) in
    Obj.repr(
# 118 "parser.mly"
                          ( [_1] )
# 942 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'parameter) in
    Obj.repr(
# 119 "parser.mly"
                                               ( _3::_1 )
# 950 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fulltype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 122 "parser.mly"
                             ( Param(Byref, _2, Id(_3)) )
# 958 "parser.ml"
               : 'parameter))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fulltype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 123 "parser.mly"
                       ( Param(Byvalue, _1, Id(_2)) )
# 966 "parser.ml"
               : 'parameter))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "parser.mly"
                                    ( [] )
# 972 "parser.ml"
               : 'declaration_list_empty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declaration_list_empty) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'declaration) in
    Obj.repr(
# 128 "parser.mly"
                                                            ( _2::_1 )
# 980 "parser.ml"
               : 'declaration_list_empty))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "parser.mly"
                            ( [] )
# 986 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 132 "parser.mly"
                                         ( _2::_1 )
# 994 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
                     ( Empty_stmt )
# 1000 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 136 "parser.mly"
                                ( Expression(_1) )
# 1007 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 137 "parser.mly"
                                          ( Stmt_block(List.rev _2) )
# 1014 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'else_statement) in
    Obj.repr(
# 138 "parser.mly"
                                                                  ( If(_3, _5, _6) )
# 1023 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'empty_expression) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'empty_expression) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'empty_expression) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 139 "parser.mly"
                                                                                                                        ( For(Some(Id(_1)), _5, _7, _9, _11) )
# 1034 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'empty_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'empty_expression) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'empty_expression) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 140 "parser.mly"
                                                                                                                ( For(None, _3, _5, _7, _9) )
# 1044 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'empty_id) in
    Obj.repr(
# 141 "parser.mly"
                                       ( Continue(_2) )
# 1051 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'empty_id) in
    Obj.repr(
# 142 "parser.mly"
                                    ( Break(_2) )
# 1058 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'empty_expression) in
    Obj.repr(
# 143 "parser.mly"
                                             ( Return(_2) )
# 1065 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 146 "parser.mly"
                            ( None )
# 1071 "parser.ml"
               : 'else_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 147 "parser.mly"
                               ( Some(_2) )
# 1078 "parser.ml"
               : 'else_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 150 "parser.mly"
                              ( None )
# 1084 "parser.ml"
               : 'empty_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 151 "parser.mly"
                           ( Some(_1) )
# 1091 "parser.ml"
               : 'empty_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "parser.mly"
                      ( None )
# 1097 "parser.ml"
               : 'empty_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 155 "parser.mly"
             ( Some(Id(_1)) )
# 1104 "parser.ml"
               : 'empty_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 158 "parser.mly"
               ( Id(_1) )
# 1111 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 159 "parser.mly"
                                       ( _2 )
# 1118 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 160 "parser.mly"
                 ( True )
# 1124 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 161 "parser.mly"
                  ( False )
# 1130 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 162 "parser.mly"
                 ( NULL )
# 1136 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 163 "parser.mly"
                    ( INT(_1) )
# 1143 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 164 "parser.mly"
                    ( CHAR(_1) )
# 1150 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 165 "parser.mly"
                    ( FLOAT(_1) )
# 1157 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 166 "parser.mly"
                    ( STRING(_1) )
# 1164 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 167 "parser.mly"
                               ( Fun_call(Id(_1), []))
# 1171 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 168 "parser.mly"
                                          ( Fun_call(Id(_1), (expr_to_list _3)) )
# 1179 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 169 "parser.mly"
                                                  ( Table_call(_1, _3) )
# 1187 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 170 "parser.mly"
                             ( _1 )
# 1194 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binary_expression) in
    Obj.repr(
# 171 "parser.mly"
                              ( _1 )
# 1201 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_assignment) in
    Obj.repr(
# 172 "parser.mly"
                             ( _1 )
# 1208 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binary_assignment) in
    Obj.repr(
# 173 "parser.mly"
                              ( _1 )
# 1215 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fulltype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 174 "parser.mly"
                                                             ( Typecast(_2, _4) )
# 1223 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 175 "parser.mly"
                                                      ( Question(_1, _3, _5) )
# 1232 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fulltype) in
    Obj.repr(
# 176 "parser.mly"
                         ( New(_2, None) )
# 1239 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'fulltype) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 177 "parser.mly"
                                                    ( New(_2, Some(_4)) )
# 1247 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 178 "parser.mly"
                              ( Delete(_2) )
# 1254 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 189 "parser.mly"
                                ( Const_expr(_1) )
# 1261 "parser.ml"
               : 'constant_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 192 "parser.mly"
                                 ( Un_operation(AND, _2) )
# 1268 "parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 193 "parser.mly"
                                               ( Un_operation(POINT, _2) )
# 1275 "parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 194 "parser.mly"
                                            ( Un_operation(POS, _2) )
# 1282 "parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 195 "parser.mly"
                                             ( Un_operation(NEG, _2) )
# 1289 "parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 196 "parser.mly"
                                 ( Un_operation(EXC, _2) )
# 1296 "parser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 199 "parser.mly"
                                               ( Bin_operation(_1, TIMES, _3) )
# 1304 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 200 "parser.mly"
                                             ( Bin_operation(_1, DIV, _3) )
# 1312 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 201 "parser.mly"
                                             ( Bin_operation(_1, MOD, _3) )
# 1320 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 202 "parser.mly"
                                              ( Bin_operation(_1, PLUS, _3))
# 1328 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 203 "parser.mly"
                                               ( Bin_operation(_1, MINUS, _3) )
# 1336 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 204 "parser.mly"
                                              ( Bin_operation(_1, LESS, _3))
# 1344 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 205 "parser.mly"
                                              ( Bin_operation(_1, MORE, _3))
# 1352 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 206 "parser.mly"
                                             ( Bin_operation(_1, LEQ, _3))
# 1360 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 207 "parser.mly"
                                             ( Bin_operation(_1, GEQ, _3))
# 1368 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 208 "parser.mly"
                                            ( Bin_operation(_1, EQ, _3))
# 1376 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 209 "parser.mly"
                                             ( Bin_operation(_1, NEQ, _3) )
# 1384 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 210 "parser.mly"
                                                     ( Bin_operation(_1, LOGICAL_AND, _3) )
# 1392 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 211 "parser.mly"
                                                    ( Bin_operation(_1, LOGICAL_OR, _3) )
# 1400 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 212 "parser.mly"
                                               ( Bin_operation(_1, COMMA, _3))
# 1408 "parser.ml"
               : 'binary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 215 "parser.mly"
                                  ( Un_assignment_right(_1, INCR) )
# 1415 "parser.ml"
               : 'unary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 216 "parser.mly"
                                  ( Un_assignment_right(_1, DECR) )
# 1422 "parser.ml"
               : 'unary_assignment))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 217 "parser.mly"
                                               ( Un_assignment_left(INCR, _2) )
# 1429 "parser.ml"
               : 'unary_assignment))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 218 "parser.mly"
                                               ( Un_assignment_left(DECR, _2) )
# 1436 "parser.ml"
               : 'unary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 221 "parser.mly"
                                                ( Bin_assignment(_1, ASSIGN, _3) )
# 1444 "parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 222 "parser.mly"
                                                 ( Bin_assignment(_1, TIMESEQ, _3) )
# 1452 "parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 223 "parser.mly"
                                               ( Bin_assignment(_1, DIVEQ, _3) )
# 1460 "parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 224 "parser.mly"
                                               ( Bin_assignment(_1, MODEQ, _3) )
# 1468 "parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 225 "parser.mly"
                                                ( Bin_assignment(_1, PLUSEQ, _3) )
# 1476 "parser.ml"
               : 'binary_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 226 "parser.mly"
                                                 ( Bin_assignment(_1, MINUSEQ, _3) )
# 1484 "parser.ml"
               : 'binary_assignment))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
;;
# 230 "parser.mly"

(* trailer *)
# 1512 "parser.ml"
